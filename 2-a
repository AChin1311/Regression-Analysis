import numpy as np
import pandas as pd
from sklearn import linear_model
from sklearn.model_selection import cross_val_predict, cross_val_score
from sklearn import metrics
from sklearn.preprocessing import StandardScaler
from sklearn import preprocessing
from sklearn.feature_selection import f_regression, mutual_info_regression
import matplotlib.pyplot as plt





""" ====== Change to scalar ====== """

content = pd.read_csv("network_backup_dataset.csv")
content = content.replace({'Day of Week': {'Monday' : 0, 'Tuesday' : 1, 'Wednesday' : 2 ,
                                         'Thursday' : 3, 'Friday' : 4,
                                         'Saturday' : 5, 'Sunday' : 6 }})

WorkFlow_list = sorted(pd.unique(content['Work-Flow-ID']))
File_list     = sorted(pd.unique(content['File Name']))  
num_WorkFlow  = len(WorkFlow_list)
num_File      = len(File_list)

for i in np.arange(num_WorkFlow):
    content = content.replace({'Work-Flow-ID': {'work_flow_%d'%i:i}})

for i in np.arange(num_File):
    content = content.replace({'File Name': {'File_%d'%i:i}})


content_all_np = content.values
X = content_all_np[: , 0:5]
Y = content_all_np[: ,  5 ]


del WorkFlow_list,File_list,content_all_np, num_WorkFlow,num_File,i
# delete unused variables


""" ====== <i> Linear Regression ====== """
print("====== <i> Linear Regression ======")


model_1 = linear_model.LinearRegression()
Y_pred1 = cross_val_predict(model_1, X, Y, cv=10)
print('Scalar  Val RMSE =',np.sqrt(metrics.mean_squared_error(Y,Y_pred1)))
#Scalar  Val RMSE = 0.1036758588449451







""" ====== <ii> Data Preprocessing ====== """
print("====== <ii> Data Preprocessing ======")


scaler = StandardScaler()
scaler.fit_transform(X)

Y_pred2 = cross_val_predict(model_1, scaler.fit_transform(X), Y, cv=10)
print('Scalar  Val RMSE =',np.sqrt(metrics.mean_squared_error(Y,Y_pred2)))
#Scalar  Val RMSE = 0.1036758588449451
#Same





""" ====== <iii> Feature Selection ====== """
print("====== <iii> Feature Selection ======")


f_test, _ = f_regression(X, Y)
f_test #/= np.max(f_test)
print("f_test")
print(f_test)

# best 123


m_test = mutual_info_regression(X, Y)
m_test /= np.max(m_test)
print("m_test")
print(m_test)

# best 123

X_FS = X[:,1:4]

#X2 =X_FS


Y_pred_FS = cross_val_predict(model_1, X_FS, Y, cv=10)
print('Scalar  Val RMSE =',np.sqrt(metrics.mean_squared_error(Y,Y_pred_FS)))
#Scalar  Val RMSE = 0.1036706732800221
# almost the same







""" ====== <iv> Feature Encoding ====== """
print("====== <iv> Feature Encoding ======")



enc1 =  preprocessing.OneHotEncoder(sparse = False)
#enc1 =  preprocessing.OneHotEncoder()
enc1.fit(X)

#print(enc1.n_values_)
#print(enc1.feature_indices_)

X_Hot = enc1.fit_transform(X)

Y_pred2 = cross_val_predict(model_1, X_Hot, Y, cv=10)
print('One-Hot Val RMSE =',np.sqrt(metrics.mean_squared_error(Y,Y_pred2)))
#One-Hot Val RMSE = 272660626045.4346





print("completed")




